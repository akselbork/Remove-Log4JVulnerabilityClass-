Clear-Host


FUNCTION Remove-Log4JVulnerabilityClassRemotely {
<#
.SYNOPSIS
CleanUp script for removing vulnerable Java class based on CVE-2021-45105

.DESCRIPTION
As the last resorse, the removing of the class file "JndiLookup.class" from the jar file containing it, can be necessary
This script can find all jar files, or a single specified file,  with the vulnerability and remove it.
You can also choose just to get a list of files that contains the class.

.PARAMETER ComputerName
Names or IP-addresses of computer to query

.PARAMETER Credential
Remote for accessing computers remotely 

.PARAMETER file
fullname of a single file to investigate

.PARAMETER JavaClass
The class name to remove

.PARAMETER WorkFolder
The folder to where the work on the file is done
Default: "temp-log4j"

.PARAMETER RootPath
The drive the workfolder is created on
Default: "C:""

.PARAMETER Compressionlevel
What type of compression should be used
Default: "Fastest"

.PARAMETER Out
To get the result of the cleanup out as an Object

.PARAMETER onlyQuery
If only interesting in getting the numbers, and fullnames on files vulnerable

.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -file "D:\ZIP\PAD.JavaBridge.jar" -out -onlyQuery -verbose


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -out -onlyQuery -verbose


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -credential (get-credential) -file "D:\ZIP\PAD.JavaBridge.jar"  -Verbose -out

VERBOSE: 01:02:00.4698 [BEGIN  ] Starting Remove-Log4JVulnerabilityClassRemotely
VERBOSE: 01:02:00.4778 [BEGIN  ] 
VERBOSE: 01:02:00.4778 [BEGIN  ] ####################################################################
VERBOSE: 01:02:00.4788 [BEGIN  ] 
VERBOSE: 01:02:00.4798 [BEGIN  ] [INPUT][CREDENTIAL]          desktop\aksel
VERBOSE: 01:02:00.4798 [BEGIN  ] [INPUT][COMPUTERS]           1
VERBOSE: 01:02:00.4808 [BEGIN  ] [INPUT][FILE]                D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 01:02:00.4808 [BEGIN  ] [INPUT][JAVACLASS]           JndiLookup.class
VERBOSE: 01:02:00.4818 [BEGIN  ] [INPUT][WORKFOLDER]          _temp-log4J
VERBOSE: 01:02:00.4818 [BEGIN  ] [INPUT][ROOTPATH]            C:
VERBOSE: 01:02:00.4828 [BEGIN  ] [INPUT][COMPRESSION]         Fastest
VERBOSE: 01:02:00.4828 [BEGIN  ] [INPUT][INCLUDENETWORKSHARE] False
VERBOSE: 01:02:00.4828 [BEGIN  ] [INPUT][WRITE OUTPUT]        True
VERBOSE: 01:02:00.4858 [BEGIN  ] [INPUT][ONLYQUERY]           False
VERBOSE: 01:02:00.4868 [BEGIN  ] [INPUT][VERBOSE]             Continue
VERBOSE: 01:02:00.4868 [BEGIN  ] 
VERBOSE: 01:02:00.4868 [BEGIN  ] ####################################################################
VERBOSE: 01:02:00.4878 [BEGIN  ] 
VERBOSE: 01:02:00.4888 [PROCESS] [COMPUTER][LOCAL] DESKTOP-1FNP0DL
VERBOSE: 01:02:00.4888 [BEGIN  ] [DESKTOP-1FNP0DL] Starting
VERBOSE: 01:02:00.4898 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][FILE]                D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 01:02:00.4898 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][JAVACLASS]           JndiLookup.class
VERBOSE: 01:02:00.4908 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][WORKFOLDER]          _temp-log4J
VERBOSE: 01:02:00.4958 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][ROOTPATH]            C:
VERBOSE: 01:02:00.4968 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][COMPRESSION]         Fastest
VERBOSE: 01:02:00.4978 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][INCLUDENETWORKSHARE] False
VERBOSE: 01:02:00.4978 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][WRITE OUTPUT]        True
VERBOSE: 01:02:00.4988 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][ONLYQUERY]           False
VERBOSE: 01:02:00.4988 [BEGIN  ] [DESKTOP-1FNP0DL][INPUT][VERBOSE]             True
VERBOSE: 01:02:00.4998 [BEGIN  ] [DESKTOP-1FNP0DL][QUERING][FILE] D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 01:02:00.5678 [BEGIN  ] [DESKTOP-1FNP0DL][QUERING] files found [1]
VERBOSE: 01:02:00.5688 [PROCESS] [DESKTOP-1FNP0DL][DIRECTORY] creating work folder [C:\_temp-log4J]
VERBOSE: 01:02:00.5708 [PROCESS] [DESKTOP-1FNP0DL][DIRECTORY] Creating folder [C:\_temp-log4J\ZIP]
VERBOSE: 01:02:00.5718 [PROCESS] [DESKTOP-1FNP0DL][FILENAME] D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 01:02:00.5738 [PROCESS] [DESKTOP-1FNP0DL][COPY/RENAME] file [D:\ZIP\PAD.JavaBridge.jar] to [C:\_temp-log4J\PAD.JavaBridge.zip]
VERBOSE: 01:02:00.5758 [PROCESS] [DESKTOP-1FNP0DL][EXPAND] file [C:\_temp-log4J\PAD.JavaBridge.zip] to folder [C:\_temp-log4J\ZIP]
VERBOSE: 01:02:03.6663 [PROCESS] [DESKTOP-1FNP0DL][REMOVING CLASS][C:\_temp-log4J\ZIP\org\apache\logging\log4j\core\lookup\JndiLookup.class] class [JndiLookup.class]
VERBOSE: 01:02:03.6713 [PROCESS] [DESKTOP-1FNP0DL][COMPRESS] file [C:\_temp-log4J\ZIP] to [C:\_temp-log4J\PAD.JavaBridge.zip]
VERBOSE: 01:02:05.2889 [PROCESS] [DESKTOP-1FNP0DL][COPY/RENAME] file [C:\_temp-log4J\PAD.JavaBridge.zip] to [D:\ZIP\PAD.JavaBridge.jar]
VERBOSE: 01:02:05.2979 [PROCESS] [DESKTOP-1FNP0DL][CLEANUP] Deleting folder [C:\_temp-log4J]
VERBOSE: 01:02:05.5099 [PROCESS] [DESKTOP-1FNP0DL][CLEANUP] Status cleanup [Successful]
VERBOSE: 01:02:05.5619 [PROCESS] [DESKTOP-1FNP0DL][FILENAME][D:\ZIP\PAD.JavaBridge.jar] Status [CLEANED]


FileName     : PAD.JavaBridge.jar
FullName     : D:\ZIP\PAD.JavaBridge.jar
Cleaned      : True
Action       : Clean
ComputerName : DESKTOP-1FNP0DL
QueryDate    : 22-12-2021 01:02:05


VERBOSE: 01:02:05.5679 [END    ] [DESKTOP-1FNP0DL]  Ending Remove-Log4JVulnerabilityClass
VERBOSE: 01:02:05.5679 [END    ] 
VERBOSE: 01:02:05.5689 [END    ] Ending Remove-Log4JVulnerabilityClassRemotely
VERBOSE: 01:02:05.5689 [END    ] 
VERBOSE: 01:02:05.5699 [END    ] ####################################################################
VERBOSE: 01:02:05.5699 [END    ] [STARTTIME] 12/22/2021 01:02:00
VERBOSE: 01:02:05.5709 [END    ] [ENDTIME]   12/22/2021 01:02:05
VERBOSE: 01:02:05.5709 [END    ] [RUNTIME]   00d:00h:00m:05s
VERBOSE: 01:02:05.5719 [END    ] ####################################################################


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -credential (get-credential) -file "D:\ZIP\PAD.JavaBridge.jar" -out -onlyQuery -verbose


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -credential (get-credential) -out -onlyQuery -verbose


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -computername Fil01 -credential (get-credential) -file "D:\ZIP\PAD.JavaBridge.jar"  -Verbose -out

.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -computername Fil01 -credential (get-credential) -file "D:\ZIP\PAD.JavaBridge.jar" -out -onlyQuery -verbose

VERBOSE: 23:31:21.5044 [BEGIN  ] Starting Remove-Log4JVulnerabilityClassRemotely
VERBOSE: 23:31:21.5199 [BEGIN  ] 
VERBOSE: 23:31:21.5199 [BEGIN  ] ####################################################################
VERBOSE: 23:31:21.5199 [BEGIN  ] 
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][CREDENTIAL]          company\administrator
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][COMPUTERS]           1
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][FILE]                D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][JAVACLASS]           JndiLookup.class
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][WORKFOLDER]          _temp-log4J
VERBOSE: 23:31:21.5199 [BEGIN  ] [INPUT][ROOTPATH]            C:
VERBOSE: 23:31:21.5356 [BEGIN  ] [INPUT][COMPRESSION]         Fastest
VERBOSE: 23:31:21.5356 [BEGIN  ] [INPUT][INCLUDENETWORKSHARE] False
VERBOSE: 23:31:21.5356 [BEGIN  ] [INPUT][WRITE OUTPUT]        True
VERBOSE: 23:31:21.5356 [BEGIN  ] [INPUT][ONLYQUERY]           True
VERBOSE: 23:31:21.5356 [BEGIN  ] [INPUT][VERBOSE]             Continue
VERBOSE: 23:31:21.5356 [BEGIN  ] 
VERBOSE: 23:31:21.5356 [BEGIN  ] ####################################################################
VERBOSE: 23:31:21.5356 [BEGIN  ] 
VERBOSE: 23:31:21.5511 [PROCESS] [COMPUTER][REMOTE] Fil01
VERBOSE: 23:31:21.5511 [PROCESS] [COMPUTER][REMOTE][Fil01] Accessable status [TRUE]
VERBOSE: 23:31:22.1237 [BEGIN  ] [FIL01] Starting
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][FILE]                D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][JAVACLASS]           JndiLookup.class
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][WORKFOLDER]          _temp-log4J
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][ROOTPATH]            C:
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][COMPRESSION]         Fastest
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][INCLUDENETWORKSHARE] False
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][WRITE OUTPUT]        True
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][ONLYQUERY]           True
VERBOSE: 23:31:22.1393 [BEGIN  ] [FIL01][INPUT][VERBOSE]             True
VERBOSE: 23:31:22.1862 [BEGIN  ] [FIL01][QUERING][FILE] D:\ZIP\PAD.JavaBridge.jar
VERBOSE: 23:31:22.2018 [BEGIN  ] [FIL01][QUERING][FILE] D:\ZIP\PAD.JavaBridge.jar - does not exists 
VERBOSE: 23:31:22.2330 [BEGIN  ] [FIL01][QUERING] files found [0]


FileName       : 
FullName       : 
Cleaned        : True
Action         : onlyQuery
ComputerName   : FIL01
QueryDate      : 12/21/2021 11:31:22 PM
PSComputerName : Fil01
RunspaceId     : 8054891b-0f6b-4ab4-b351-50e6db368086

VERBOSE: 23:31:22.2487 [END    ] [FIL01]  Ending 
VERBOSE: 23:31:22.2854 [END    ] 
VERBOSE: 23:31:22.2854 [END    ] Ending Remove-Log4JVulnerabilityClassRemotely
VERBOSE: 23:31:22.2854 [END    ] 
VERBOSE: 23:31:22.2854 [END    ] ####################################################################
VERBOSE: 23:31:22.2854 [END    ] [STARTTIME] 12/21/2021 23:31:21
VERBOSE: 23:31:22.3012 [END    ] [ENDTIME]   12/21/2021 23:31:22
VERBOSE: 23:31:22.3012 [END    ] [RUNTIME]   00d:00h:00m:00s
VERBOSE: 23:31:22.3012 [END    ] ####################################################################


.EXAMPLE
Remove-Log4JVulnerabilityClassRemotely -computername Fil01 -credential $cred -out -onlyQuery


FileName       : 
FullName       : C:\_FILES\PAD.JavaBridge-2.jar | S:\Data\FILES\PAD.JavaBridge-2.jar | S:\Share\FILES\PAD.JavaBridge-2.jar
Cleaned        : False
Action         : onlyQeury
ComputerName   : FIL01
QueryDate      : 12/21/2021 11:36:59 PM
PSComputerName : Fil01
RunspaceId     : 29191d74-f5b6-487b-9588-a164aaf73101



.NOTES

AUTHOR:     Aksel Bork
Date:       2021-12-22
PSVersion:  5
Version:    1       Creation

.LINK



#>
    [cmdletbinding()]
    param (
        [array]$computerName,

        [parameter(mandatory=$true)]
        [pscredential]$Credential,

        [string]$file,  # = "D:\ZIP\PAD.JavaBridge2.jar" ,

        [string]$JavaClass          = "JndiLookup.class",

        [string]$WorkFolder         = "_temp-log4J",

        [validatePattern("^[a-zA-Z]:$")]
        [string]$RootPath           = "C:",

        [ValidateSet("Optimal","NoCompression","Fastest")]
        [string]$CompressionLevel   = "Fastest", 

        [SWITCH]$includeNetworkShare,

        [SWITCH]$out,

        [SWITCH]$onlyQuery

    )
    BEGIN {
        #region HELPERFUNCTION
        FUNCTION WV {
            Param (
                $prefix,
                $message
            )
            $time = Get-Date -f HH:mm:ss.ffff
            Write-Verbose "$time [$($prefix.padright(7,' '))] $message"
        }

        FUNCTION Remove-Log4JVulnerabilityClass {

            [cmdletbinding()]
            Param (    
                <#
                [ValidateScript({
                    if(-Not ($_ | Test-Path) ){
                        throw "File or folder does not exist"
                    }
                    if(-Not ($_ | Test-Path -PathType Leaf) ){
                        throw "The Path argument must be a file. Folder paths are not allowed."
                    }
                    if($_ -notmatch "(\.jar)"){
                        throw "The file specified in the path argument must be Jar"
                    }
                    return $true 
                })]
                #>
                [parameter(Position=0)]
                [string]$file,  # = "D:\ZIP\PAD.JavaBridge2.jar" ,

                [parameter(Position=1)]
                [string]$JavaClass          = "JndiLookup.class",

                [parameter(Position=2)]
                [string]$WorkFolder         = "_temp-log4J",

                [parameter(Position=3)]
                [validatePattern("^[a-zA-Z]:$")]
                <#
                [ValidateScript({ 
                    if(-Not (Test-Path $_) ){
                        throw "Rootpath does not exist."# Should be either be $((Get-PSDrive -PSProvider FileSystem | Select-Object @{name="path";expression={"$($_.name):"}}).path -join ", ")"
                    }
                })]
                #>
                [string]$RootPath           = "C:",

                [parameter(Position=4)]
                [ValidateSet("Optimal","NoCompression","Fastest")]
                [string]$CompressionLevel   = "Fastest", 

                [parameter(Position=5)]
                [SWITCH]$includeNetworkShare,

                [parameter(Position=6)]
                [SWITCH]$out,

                [parameter(Position=7)]
                [SWITCH]$onlyQuery,

                [parameter(Position=8)]
                #[validateSet("true","false")]
                [Switch]$UseVerbose
            )
            BEGIN {
                #region HELPERFUNCTIONS
                FUNCTION WV {
                    Param (
                        $prefix,
                        $message
                    )
                    $time = Get-Date -f HH:mm:ss.ffff
                    Write-Verbose "$time [$($prefix.padright(7,' '))] $message"
                }
                #endregion 

                $old_VerbosePreference = $VerbosePreference

                If ($useVerbose -eq $true) {
                    $VerbosePreference = "continue"
                } ELSE {
                    $VerbosePreference = "Silentlycontinue"
                }
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)] Starting"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][FILE]                $($file)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][JAVACLASS]           $($JavaClass)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][WORKFOLDER]          $($WorkFolder)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][ROOTPATH]            $($RootPath)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][COMPRESSION]         $($CompressionLevel)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][INCLUDENETWORKSHARE] $($includeNetworkShare)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][WRITE OUTPUT]        $($out)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][ONLYQUERY]           $($onlyQuery)"
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][INPUT][VERBOSE]             $($UseVerbose)"

                [array]$sourceFiles = $null
                $WorkFolderPath     = Join-Path $RootPath $WorkFolder
                $output             = $null

                IF ((-NOT ($PSBoundParameters.ContainsKey('File'))) -or ([STRING]::IsNullOrEmpty($file))) {
                    ## FIND JAR-FILES 
                    IF ($includeNetworkShare.IsPresent) {
                        WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] Looking on [all] drives"
                        $smbMapping = $null
                    } ELSE {
                         WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] Looking on [local] drives"
                         TRY {
                            $VerbosePreference = "silentlycontinue"
                            ($smbMapping = Get-SmbMapping -ErrorAction SilentlyContinue) | Out-Null
                    
                            If ($useVerbose -eq $true) {
                                $VerbosePreference = "continue"
                            }
                        } CATCH {
                            WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] Could not find any [MAPPED] drives"
                            $smbMapping = $null
                        }
                    }
                    IF ($includeNetworkShare.IsPresent) {
                        WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] Getting [all] drives"
                        $Drives = Get-PSDrive | Where-Object {($_.provider -like "*FileSystem*")}
                    } ELSE {
                        WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] Getting [local] drives"
                        IF (-NOT [STRING]::IsNullOrEmpty($smbMapping)) {
                            WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING][FILTERING] Removing smbmapped drives from query"
                            $Drives = Get-PSDrive | Where-Object {(($_.provider -like "*FileSystem*") -and ($_.DisplayRoot -notin $smbMapping.remotepath))}
                        } ELSE {
                            WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING][FILTERING] no smbmapped drives exits.. no filtering nessesary"
                            $Drives = Get-PSDrive | Where-Object {$_.provider -like "*FileSystem*" }
                        }
                    }

                    $sourceFiles = $Drives | foreach {
                        WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING][DRIVE] $($_.root)"
                        Get-ChildItem $_.root -Recurse -Filter "*.jar" -force -ErrorAction SilentlyContinue | foreach {
                            TRY {
                                Select-String $_ -pattern $JavaClass -ErrorAction Stop | Select-Object path -Unique -ErrorAction SilentlyContinue
                            } CATCH {
                            }
                        }
                    }

                } ELSE {
                    WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING][FILE] $($file)"
                    TRY {
                        $sourceFile = get-item $file -ErrorAction Stop | Select-Object name,@{name='path';expression={$_.fullname}}
                    } CATCH {
                        WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING][FILE] $($file) - does not exists "
                    }
            
                   # $sourceFile.FullName
                    $sourceFiles = $sourceFile | foreach {
                        TRY {
                            Select-String $_.path -pattern $JavaClass -ErrorAction Stop | Select-Object path -Unique -ErrorAction SilentlyContinue
                        } CATCH {
                        }
                    }
                }
                WV -prefix BEGIN -message "[$($env:COMPUTERNAME)][QUERING] files found [$($sourcefiles | measure-object | select-object -ExpandProperty count)]"
            }
            PROCESS {
                ## REMOVE "JndiLookup" CLASS FROM JAR FILES AND COMPRESS THEM AGAIN
                IF ((($sourceFiles | Measure-Object).count -gt 0) -and ($onlyQuery.IsPresent -eq $false)) { 
                    TRY {
                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][DIRECTORY] creating work folder [$WorkfolderPath]"
                        New-Item -Name $WorkFolder -path $($RootPath+"\") -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
                    } CATCH {
                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][DIRECTORY] creating work folder [$WorkfolderPath][FAILED]"
                    }

                    IF (Test-Path $WorkFolderPath ) {
                        $ZIPfolderPath = (Join-Path $WorkFolderPath ZIP)
                        TRY {
                            WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][DIRECTORY] Creating folder [$ZipfolderPath]"
                            New-Item -Name ZIP -Path $WorkFolderPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
                        } CATCH {
                            WV -prefixPROCESS -message "[$($env:COMPUTERNAME)][DIRECTORY] Creating folder [$ZipfolderPath][FAILED]"
                        }
                    }

                    IF (Test-Path $ZIPfolderpath ) {
                        foreach ($Sourcefile in $($sourceFiles.path)){
                    
                            $Obj        = $null
                            $fileStatus = $null

                            WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][FILENAME] $($sourcefile)"

                            TRY {
                                $destinationFile = join-path $WorkfolderPath $(($sourceFile.split("\"))[-1] -replace ".jar",".zip")
                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COPY/RENAME] file [$sourceFile] to [$destinationFile]"
                                Copy-item -path $sourceFile -destination $destinationFile -Force -ErrorAction Stop
                            } CATCH {
                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COPY/RENAME] file [$sourceFile] to [$destinationFile] [FAILED]"
                            }
                            TRY {
                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][EXPAND] file [$destinationFile] to folder [$ZIPFolderPath]"
                                Expand-Archive -Path $destinationFile -DestinationPath $ZIPFolderPath -Force -ErrorAction Stop
                            } CATCH {
                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][EXPAND] file [$destinationFile] to folder [$ZIPFolderPath] [FAILED]" 
                            }

                            IF ((Get-ChildItem $ZIPfolderpath -Recurse -File | Measure-Object | Select-Object -ExpandProperty count ) -gt 0) { 
                                TRY {
                                    Get-ChildItem $ZIPfolderpath -Filter $JavaClass -Recurse | 
                                        foreach {
                                            TRY {
                                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][REMOVING CLASS][$($_.FullName)] class [$javaclass]"
                                                Remove-Item -Path $_.fullname -force -Confirm:$false -ErrorAction stop
                                                $removeStatus = $true
                                            } CATCH {
                                                 WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][REMOVING CLASS][$($_.FullName)] class [$javaclass] [FAILED]"
                                                $removeStatus = $true
                                            }
                                        } # END Foreach
                                } CATCH {            
                                }

                                TRY {
                                    $compress = @{
                                        Path                = $ZipFolderPath
                                        CompressionLevel    = $CompressionLevel
                                        DestinationPath     = $destinationFile 
                                    }
                                     WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COMPRESS] file [$ZipFolderPath] to [$destinationFile]"
                                    Compress-Archive @compress -Force -ErrorAction stop
                                    $compressStatus = $true
                                } CATCH {
                                    WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COMPRESS] file [$ZipFolderPath] to [$destinationFile] [FAILED]"
                                    $compressStatus = $false
                                }

                                IF ($compressStatus) {
                                    TRY {
                                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COPY/RENAME] file [$destinationFile] to [$sourceFile]"
                                        Copy-item -path $destinationFile -destination $sourceFile -Force 
                                    } CATCH {
                                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][COPY/RENAME] file [$destinationFile] to [$sourceFile] [FAILED]"
                                    }
                                }

                                TRY {
                                    WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][CLEANUP] Deleting folder [$workfolderPath]"
                                    Remove-Item -Path $compress.Path -Recurse -Force -Confirm:$false -ErrorAction SilentlyContinue
                                    $CleanUpStatus = "Successful"
                                } CATCH {
                                    $CleanUpStatus = "Unsuccesful"
                                }

                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][CLEANUP] Status cleanup [$cleanUpStatus]"
                            }  # end IF (Get-childtem $workfolderpath)

                            ## TESTING IF ORGINAL FILE HAS BEEN "CLEANED"
                            TRY {
                                IF ([String]::isNullOrEmpty($(Select-String $Sourcefile -pattern $JavaClass  -ErrorAction SilentlyContinue))) {
                                    WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][FILENAME][$Sourcefile] Status [CLEANED]"
                                    $fileStatus = $true
                                } ELSE {
                                    WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][FILENAME][$Sourcefile] Status [UNCLEANED]"
                                    $fileStatus = $False
                                }
                            } CATCH {
                            }

                            IF ($out.IsPresent) {
                                $param = @{
                                    ComputerName    = $env:COMPUTERNAME
                                    FileName        = $(get-item -Path $Sourcefile -ErrorAction SilentlyContinue).Name
                                    FullName        = $Sourcefile
                                    Cleaned         = $fileStatus
                                    QueryDate       = $(get-date)
                                    Action          = "Clean"
                                }

                                New-Object -TypeName psobject -Property $param
                            } ELSE {
                                WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][OUTPUT] Not choosen"
                            }
                        } # End Foreach ($sourcefile in)
                    }
                } ELSEIF ((($sourceFiles | Measure-Object).count -gt 0) -and ($onlyQuery.IsPresent)) {
                    WV -prefix PROCESS -message "[$($env:COMPUTERNAME)] Status [UNCLEANED]"
                    IF ($out.IsPresent) {
                        $param = @{
                            ComputerName    = $env:COMPUTERNAME
                           # FileName        = $(get-item -Path $(Sourcefile) -ErrorAction SilentlyContinue).Name
                            FullName        = $sourceFiles.path -join " | "
                            Cleaned         = $false
                            QueryDate       = $(get-date)
                            Action          = "onlyQeury"
                        }
                           
                       #$Sourcefiles

                        New-Object -TypeName psobject -Property $param
                        
                    } ELSE {
                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)][OUTPUT] Not choosen"
                    }
                } ELSE {
                    IF ($out.IsPresent) {
                        IF ($onlyQuery.IsPresent) {
                            $action = "onlyQuery"
                        } Else {
                            $action = "Clean"
                        }
                        IF (-NOT [STRING]::IsNullOrEmpty($file)) {
                            $s_file = $file
                            $s_filename = ($file.Split("\"))[-1]
                        } ELSE {
                            $s_file = $null
                            $s_filename = $null
                        }

                        $param = @{
                            ComputerName    = $env:COMPUTERNAME
                            FileName        = $s_filename
                            FullName        = $s_file  
                            Cleaned         = $true
                            QueryDate       = $(get-date)
                            Action          = $action
                        }

                        New-Object -TypeName psobject -Property $param
                    } ELSE {
                        WV -prefix PROCESS -message "[$($env:COMPUTERNAME)] Non vulnerbal files found."
                    }
                }
            }
            END {
                WV -prefix END  "[$($env:COMPUTERNAME)]  Ending $($myinvocation.MyCommand)"
                $VerbosePreference = $old_VerbosePreference
            }
        }

        #endregion HELPERFUNCTION

        $startTime = $(get-date)

        WV -prefix BEGIN -message "Starting $($myinvocation.MyCommand)"
        WV -prefix BEGIN -message ""
        WV -prefix BEGIN -message "####################################################################"
        WV -prefix BEGIN -message ""
        WV -prefix BEGIN -message "[INPUT][CREDENTIAL]          $($cred.UserName)"
        WV -prefix BEGIN -message "[INPUT][COMPUTERS]           $(IF ([string]::IsNullOrEmpty($computername)) {1} ELSE {($computername | Measure-Object).Count})"
        WV -prefix BEGIN -message "[INPUT][FILE]                $($file)"
        WV -prefix BEGIN -message "[INPUT][JAVACLASS]           $($JavaClass)"
        WV -prefix BEGIN -message "[INPUT][WORKFOLDER]          $($WorkFolder)"
        WV -prefix BEGIN -message "[INPUT][ROOTPATH]            $($RootPath)"
        WV -prefix BEGIN -message "[INPUT][COMPRESSION]         $($CompressionLevel)"
        WV -prefix BEGIN -message "[INPUT][INCLUDENETWORKSHARE] $($includeNetworkShare)"
        WV -prefix BEGIN -message "[INPUT][WRITE OUTPUT]        $($out)"
        WV -prefix BEGIN -message "[INPUT][ONLYQUERY]           $($onlyQuery)"
        WV -prefix BEGIN -message "[INPUT][VERBOSE]             $($VerbosePreference)"
        WV -prefix BEGIN -message ""
        WV -prefix BEGIN -message "####################################################################"
        WV -prefix BEGIN -message ""

        IF (-NOT ($PSBoundParameters.Containskey("ComputerName"))) {
            [array]$computername = $env:COMPUTERNAME
        } 

        IF (-NOT ($PSBoundParameters.Containskey("file"))) {
            $file = $null
        } 

        IF (-NOT ($PSBoundParameters.Containskey("javaClass"))) {
            $javaClass = "JndiLookup.class"
        }

        IF (-NOT ($PSBoundParameters.Containskey("workfolder"))) {
            $WorkFolder = "_temp-log4J"
        }

        IF (-NOT ($PSBoundParameters.Containskey("RootPath"))) {
            $RootPath = "C:"
        }

        IF (-NOT ($PSBoundParameters.Containskey("Compressionlevel"))) {
            $CompressionLevel = "Fastest"
        }

        IF ($VerbosePreference -like "Continue") {
            $p_verbose = $true
        } Else {
            $p_verbose = $false
        }
    }
    PROCESS {
        Foreach ($computer in $computerName) {
            IF ($computer -like $env:COMPUTERNAME) {
                WV -prefix PROCESS -message "[COMPUTER][LOCAL] $($computer)"
                
                $param = $null
                $param = @{
                   file                = $file
                   JavaClass           = $JavaClass
                   WorkFolder          = $WorkFolder
                   RootPath            = $RootPath
                   CompressionLevel    = $CompressionLevel
                   includeNetworkShare = $includeNetworkShare
                   out                 = $out
                   onlyQuery           = $onlyQuery
                   useVerbose          = $p_verbose
                }

                Remove-Log4JVulnerabilityClass @param

                #Invoke-Command -ComputerName $computer -ScriptBlock ${function:Remove-Log4JVulnerabilityClass} -ArgumentList $file, $JavaClass, $WorkFolder,$RootPath,$CompressionLevel,$includeNetworkShare,$out,$onlyQuery,$p_verbose
            } ELSE {
                WV -prefix PROCESS -message "[COMPUTER][REMOTE] $($computer)"
                IF (Test-WSMan -ComputerName $computer -ErrorAction SilentlyContinue) {
                    WV -prefix PROCESS -message "[COMPUTER][REMOTE][$($computer)] Accessable status [TRUE]"
                    Invoke-Command -ComputerName $computer -ScriptBlock ${function:Remove-Log4JVulnerabilityClass} -ArgumentList $file, $JavaClass, $WorkFolder,$RootPath,$CompressionLevel,$includeNetworkShare,$out,$onlyQuery,$p_verbose
                } ELSE {
                    WV -prefix PROCESS -message "[COMPUTER][REMOTE][$($computer)] Accessable stats [FALSE]"
                }
            }
        }

    }
    END {
        WV -prefix END -message ""
        WV -prefix END -message "Ending $($myinvocation.MyCommand)"
        WV -prefix END -message ""
        $endTime = $(get-date)
        $timeSpawn = New-TimeSpan -Start $startTime -End $endTime
        WV -prefix END -message "####################################################################"
        WV -prefix END -message "[STARTTIME] $($startTime)"
        WV -prefix END -message "[ENDTIME]   $($EndTime)"
        WV -prefix END -message "[RUNTIME]   $("{0:dd}d:{0:hh}h:{0:mm}m:{0:ss}s" -f $($timeSpawn))"
        WV -prefix END -message "####################################################################"
    }
}